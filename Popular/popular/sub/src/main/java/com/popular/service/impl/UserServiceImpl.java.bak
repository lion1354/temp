package com.popular.service.impl;

import java.util.List;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.popular.common.id.IdGen;
import com.popular.dao.TopicCollectDao;
import com.popular.dao.UserDao;
import com.popular.model.TopicCollect;
import com.popular.model.User;
import com.popular.service.UserService;

@Service
public class UserServiceImpl implements UserService {
	private final static Logger LOG = LoggerFactory
			.getLogger(UserServiceImpl.class);
	@Resource
	UserDao userDao;

	@Resource
	TopicCollectDao topicCollectDao;

	@Override
	public User get(long id) {
		return userDao.get(id);
	}

	@Override
	public int add(User user) {
		user.setId(IdGen.genId());
		return userDao.add(user);
	}

	@Override
	public int delete(User user) {
		user.setActive(false);
		return userDao.update(user);
	}

	@Override
	public int update(User user) {
		return userDao.update(user);
	}

	@Cacheable(value = "accessTokenUser", key = "#accessToken")
	@Override
	public User verifyAccessToken(String accessToken) {
		LOG.info("verifyAccessToken executing......");
		List<User> users = userDao.getUserByAccessToken(accessToken);
		if (users.size() != 1) {
			if (users.size() > 1) {
				LOG.error("accessToken");
			}
			return null;
		}
		return users.get(0);
	}

	@Override
	public User getUserByLoginName(String loginName) {
		return userDao.getUserByLoginName(loginName);
	}

	@Override
	public User getUserByMail(String mail) {
		return userDao.getUserByLoginName(mail);
	}

	@Override
	public List<User> getUsersByIds(List<Long> ids) {
		return userDao.getUsersByIds(ids);
	}

	@Override
	public List<TopicCollect> getCollectTopicByUserId(long userId) {

		return topicCollectDao.getTopicCollectsByUserId(userId);
	}

}
