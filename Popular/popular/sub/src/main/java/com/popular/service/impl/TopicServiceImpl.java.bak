package com.popular.service.impl;

import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.popular.common.id.IdGen;
import com.popular.dao.ReplyDao;
import com.popular.dao.TopicCollectDao;
import com.popular.dao.TopicDao;
import com.popular.dao.UserDao;
import com.popular.model.Topic;
import com.popular.model.TopicCollect;
import com.popular.model.User;
import com.popular.service.TopicService;

@Service("topicService")
public class TopicServiceImpl implements TopicService {
	@Resource
	TopicDao topicDao;

	@Resource
	UserDao userDao;

	@Resource
	TopicCollectDao topicCollectDao;

	@Resource
	ReplyDao replyDao;

	@Override
	public List<Topic> getTopics(HashMap<String, Object> params) {
		return topicDao.queryAll(params);
	}

	public Topic getFullTopic(long topicId) {
		Topic topic = topicDao.getFullTopic(topicId);
		topic.setReplys(replyDao.getRepliesByTopicId(topic.getId()));
		return topic;
	}

	public Topic get(long topicId) {
		return topicDao.get(topicId);
	}

	@Override
	public long add(Topic topic) {
		long id = IdGen.genId();
		topic.setId(id);
		topicDao.add(topic);

		User author = userDao.get(topic.getAuthorId());

		if (author != null) {
			author.setScore(author.getScore() + 5);
			author.setTopicCount(author.getTopicCount() + 1);
			userDao.update(author);
		}

		return id;
	}

	public int update(Topic topic) {
		return topicDao.update(topic);
	}

	public int delete(Topic topic) {
		// return topicDao.delete(topic);
		return -1;
	}

	/**
	 * 收藏 topic
	 * 
	 * @param user
	 * @param topic
	 * @return
	 */
	public int collectTopic(User user, Topic topic) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("userId", user.getId());
		map.put("topicId", topic.getId());
		TopicCollect topicCollect = topicCollectDao.get(map);
		if (null == topicCollect) {
			topicCollect = new TopicCollect();
			topicCollect.setUserId(user.getId());
			topicCollect.setTopicId(topic.getId());
			topicCollectDao.add(topicCollect);

			user.setCollectTopicCount(user.getCollectTopicCount() + 1);
			topic.setCollectCount(topic.getCollectCount() + 1);
			userDao.update(user);
			topicDao.update(topic);
		}
		return 1;
	}

	/**
	 * 取消收藏 topic
	 * 
	 * @param user
	 * @param topic
	 * @return
	 */
	public int deCollectTopic(User user, Topic topic) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("userId", user.getId());
		map.put("topicId", topic.getId());
		TopicCollect topicCollect = topicCollectDao.get(map);
		if (null != topicCollect) {
			topicCollectDao.delete(topicCollect);

			user.setCollectTopicCount(user.getCollectTopicCount() - 1);
			topic.setCollectCount(topic.getCollectCount() - 1);
			userDao.update(user);
			topicDao.update(topic);
		}
		return 1;
	}

}
